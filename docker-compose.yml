version: '3'
services:

  customers:
    container_name: customers
    build: .
    command: ./node_modules/.bin/nodemon -- --inspect=0.0.0.0 customerService.js
    volumes:
      - ./customerService.js:/usr/src/customerService.js
      - /usr/src/node_modules
    ports:
      - 9229:9229
    networks:
      - application
      - bus

  invoices:
    container_name: invoices
    build: .
    command: ./node_modules/.bin/nodemon -- --inspect=0.0.0.0 invoiceService.js
    volumes:
      - ./invoiceService.js:/usr/src/invoiceService.js
      - /usr/src/node_modules
    ports:
      - 9228:9229
    networks:
      - application
      - bus

  mongo:
    container_name: mongo
    image: mongo
    volumes:
      - mongo-data:/data/db
    networks:
      - application

  kong-database:
    container_name: postgres
    image: postgres:9.4
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_DB=kong
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - kong
      
  kong:
    container_name: kong
    build: ./kong/
    restart: always
    ports:
      - 80:80
      - 443:443
      - 8001:8001
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=kong-database
    volumes:
      - ./kong/kong.conf:/etc/kong/kong.conf
    networks:
      - kong
      - bus

  eg:
    container_name: eg
    build: ./eg
    command: npm start
    volumes:
      - /usr/src/node_modules
      - ./eg/config:/usr/src/config
    ports:
      - 81:80
      - 9876:9876
    networks:
      - eg
      - bus

  redis:
    container_name: redis
    image: redis:alpine
    volumes:
      - redis-data:/data
    networks:
      - eg

  konga:
    container_name: konga
    image: pgbi/kong-dashboard:v2
    ports:
      - 8080:8080
    networks:
      - kong

volumes:
  mongo-data:
  postgres-data:
  redis-data:

networks:
  application:
  kong:
  eg:
  bus:
